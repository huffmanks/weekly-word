---
const { podcastTitle, sermonTitle, image, audio } = Astro.props;
---

<div>
  <audio
    id="audio"
    class="invisible absolute -top-full -left-full opacity-0"
    src={audio}
    preload="metadata">
  </audio>

  <div
    id="audio-player"
    class="right-0 bottom-0 left-0 z-20 hidden bg-neutral-300 dark:bg-neutral-800">
    <div class="mx-auto max-w-(--breakpoint-sm)">
      <div class="flex items-center gap-4">
        <div class="size-16">
          <img src={image} alt={sermonTitle} />
        </div>
        <div class="flex flex-1 items-center gap-4">
          <button id="close-player-btn" class="flex-1 cursor-pointer appearance-none text-left">
            <div class="leading-normal font-bold text-neutral-900 dark:text-neutral-100">
              {sermonTitle}
            </div>
            <div class="text-sm text-neutral-600 dark:text-neutral-400">{podcastTitle}</div>
          </button>

          <button id="play-toggle-btn" class="cursor-pointer pr-4 sm:pr-0">
            <div id="play-icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <g fill="none" fill-rule="evenodd">
                  <path
                    d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z">
                  </path>
                  <path
                    fill="currentColor"
                    d="M5.669 4.76a1.47 1.47 0 0 1 2.04-1.177c1.062.454 3.442 1.533 6.462 3.276c3.021 1.744 5.146 3.267 6.069 3.958c.788.591.79 1.763.001 2.356c-.914.687-3.013 2.19-6.07 3.956c-3.06 1.766-5.412 2.832-6.464 3.28c-.906.387-1.92-.2-2.038-1.177c-.138-1.142-.396-3.735-.396-7.237c0-3.5.257-6.092.396-7.235">
                  </path>
                </g>
              </svg>
            </div>
            <div id="pause-icon" class="hidden">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <g fill="none">
                  <path
                    d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z">
                  </path>
                  <path
                    fill="currentColor"
                    d="M9 3a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1Zm8 0a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1Z">
                  </path>
                </g>
              </svg>
            </div>
          </button>
        </div>
      </div>

      <div class="flex items-center justify-between gap-2 sm:my-2">
        <span
          id="currentTime"
          class="hidden font-mono text-xs text-neutral-700 sm:inline-block dark:text-neutral-300"
          >00:00</span
        >
        <input id="range-input" class="range" type="range" value="0" min="0" />
        <span
          id="duration"
          class="hidden font-mono text-xs text-neutral-700 sm:inline-block dark:text-neutral-300"
          >00:00</span
        >
      </div>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const startBtn = document.getElementById("start-btn");
    const audio = document.getElementById("audio");
    const audioPlayer = document.getElementById("audio-player");
    const playToggleBtn = document.getElementById("play-toggle-btn");
    const playIcon = document.getElementById("play-icon");
    const pauseIcon = document.getElementById("pause-icon");
    const currentTime = document.getElementById("currentTime");
    const rangeInput = document.getElementById("range-input");
    const duration = document.getElementById("duration");
    const closePlayerBtn = document.getElementById("close-player-btn");
    const footer = document.getElementById("footer");

    startBtn.addEventListener("click", () => {
      startBtn.disabled = true;
      audio.play();
      audioPlayer.classList.add("fixed");
      audioPlayer.classList.remove("hidden");
      playIcon.classList.add("hidden");
      pauseIcon.classList.remove("hidden");

      footer.classList.add("pb-36");
      footer.classList.remove("pb-16");
    });

    audio.addEventListener("loadedmetadata", () => {
      duration.textContent = formatTime(audio.duration);
      rangeInput.max = Math.floor(audio.duration).toString();
    });

    rangeInput.addEventListener("input", () => {
      currentTime.textContent = formatTime(parseInt(rangeInput.value));
    });

    rangeInput.addEventListener("change", () => {
      audio.currentTime = parseInt(rangeInput.value);
    });

    audio.addEventListener("timeupdate", () => {
      rangeInput.value = Math.floor(audio.currentTime).toString();
      currentTime.textContent = formatTime(audio.currentTime);
    });

    playToggleBtn.addEventListener("click", () => {
      playToggle(audio.paused, audio, playIcon, pauseIcon);
    });

    closePlayerBtn.addEventListener("click", () => {
      audioPlayer.classList.add("hidden");
      audioPlayer.classList.remove("fixed");
      footer.classList.add("pb-16");
      footer.classList.remove("pb-36");
      playToggle(false, audio, playIcon, pauseIcon);
      audio.currentTime = 0;
      startBtn.disabled = false;
    });
  });

  function formatTime(secs) {
    const minutes = Math.floor(secs / 60)
      .toString()
      .padStart(2, "0");
    const seconds = Math.floor(secs % 60)
      .toString()
      .padStart(2, "0");
    return `${minutes}:${seconds}`;
  }

  function playToggle(isPaused, audioEl, playIcon, pauseIcon) {
    if (isPaused) {
      audioEl.play();
      playIcon.classList.add("hidden");
      pauseIcon.classList.remove("hidden");
    } else {
      audioEl.pause();
      playIcon.classList.remove("hidden");
      pauseIcon.classList.add("hidden");
    }
  }
</script>

<style>
  :root,
  html:not(.dark):not([data-theme="dark"]) {
    --range-thumb: var(--color-neutral-100);
    --range-progress: var(--color-neutral-900);
    --range-track: var(--color-neutral-400);
  }

  @media (prefers-color-scheme: dark) {
    :root:not(.dark) {
      --range-thumb: var(--color-neutral-900);
      --range-progress: var(--color-neutral-100);
      --range-track: var(--color-neutral-600);
    }
  }

  html.dark {
    --range-thumb: var(--color-neutral-900);
    --range-progress: var(--color-neutral-100);
    --range-track: var(--color-neutral-600);
  }

  .range {
    appearance: none;
    webkit-appearance: none;
    --radius-selector: 0.5rem;
    --range-thumb-size: calc(var(--size-selector, 0.25rem) * 2);
    --range-fill: 1;
    --range-p: 0.25rem;
    --depth: 1;
    --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
    width: 100%;
    height: var(--range-thumb-size);
    border: none;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    vertical-align: middle;
    overflow: hidden;
    cursor: pointer;
  }

  [dir="rtl"] .range {
    --range-dir: -1;
  }

  .range:focus {
    outline: none;
  }

  .range:focus-visible {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .range::-webkit-slider-runnable-track {
    width: 100%;
    height: calc(var(--range-thumb-size) * 0.5);
    background-color: var(--range-track);
    border-radius: var(--radius-selector);
  }

  .range::-webkit-slider-thumb {
    appearance: none;
    webkit-appearance: none;
    box-sizing: border-box;
    width: var(--range-thumb-size);
    height: var(--range-thumb-size);
    background-color: var(--range-thumb);
    color: var(--range-progress);
    border: var(--range-p) solid;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    box-shadow:
      0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 1px color-mix(in oklab, var(--range-thumb) calc(var(--depth) * 10%), #0000),
      0 0 0 2rem var(--range-thumb) inset,
      calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0
        0 calc(100rem * var(--range-fill));
    position: relative;
    top: 50%;
    transform: translateY(-50%);
  }

  .range::-moz-range-track {
    width: 100%;
    height: calc(var(--range-thumb-size) * 0.5);
    background-color: var(--range-track);
    border-radius: var(--radius-selector);
  }

  .range::-moz-range-thumb {
    appearance: none;
    webkit-appearance: none;
    box-sizing: border-box;
    width: var(--range-thumb-size);
    height: var(--range-thumb-size);
    background-color: var(--range-thumb);
    color: var(--range-progress);
    border: var(--range-p) solid;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    box-shadow:
      0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 1px color-mix(in oklab, var(--range-thumb) calc(var(--depth) * 10%), #0000),
      0 0 0 2rem var(--range-thumb) inset,
      calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0
        0 calc(100rem * var(--range-fill));
    position: relative;
    top: 50%;
    transform: translateY(-50%);
  }

  .range:disabled {
    cursor: not-allowed;
    opacity: 0.3;
  }
</style>
